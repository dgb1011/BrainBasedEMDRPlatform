import { supabase } from '../supabase';
import { UserRole } from '../auth';
import { z } from 'zod';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';

// Kajabi webhook schemas
export const kajabiWebhookSchema = z.object({
  event: z.enum(['course.completed', 'student.enrolled', 'student.updated']),
  student: z.object({
    id: z.string(),
    email: z.string().email(),
    firstName: z.string(),
    lastName: z.string(),
    courseId: z.string().optional(),
    courseName: z.string().optional(),
    completionDate: z.string().optional(),
  }),
  course: z.object({
    id: z.string(),
    name: z.string(),
    status: z.string(),
  }).optional(),
});

export type KajabiWebhook = z.infer<typeof kajabiWebhookSchema>;

// Student profile interface for Kajabi sync
export interface KajabiStudentProfile {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  courseId?: string;
  courseName?: string;
  completionDate?: Date;
  status: 'enrolled' | 'completed' | 'in_progress';
}

export class KajabiService {
  /**
   * Generate a secure temporary password for Kajabi users
   */
  private static generateTemporaryPassword(): string {
    return crypto.randomBytes(16).toString('hex') + '!A1';
  }

  /**
   * Generate a secure login token for Kajabi users
   */
  private static generateKajabiLoginToken(userId: string): string {
    return jwt.sign(
      { 
        userId, 
        source: 'kajabi',
        purpose: 'first_login',
        timestamp: Date.now()
      },
      process.env.JWT_SECRET || 'default-secret',
      { expiresIn: '7d' } // 7 days to complete setup
    );
  }

  /**
   * Create a pre-verified user (BYPASSING SUPABASE AUTH)
   */
  static async createPreVerifiedUser(studentData: KajabiStudentProfile): Promise<any> {
    try {
      // Check if user already exists
      const { data: existingUser } = await supabase
        .from('users')
        .select('id')
        .eq('email', studentData.email)
        .single();

      if (existingUser) {
        return { id: existingUser.id, email: studentData.email };
      }

      // Create user record in our database (UUID generated by DB)
      const { data: newUser, error: userError } = await supabase
        .from('users')
        .insert({
          email: studentData.email,
          first_name: studentData.firstName,
          last_name: studentData.lastName,
          role: 'student',
          email_verified: true,
          source: 'kajabi',
          needs_password_setup: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select('id, email')
        .single();

      if (userError) {
        console.error('Error creating user record:', userError);
        throw userError;
      }

      // Create student record
      const { error: dbError } = await supabase
        .from('students')
        .insert({
          user_id: newUser!.id,
          kajabi_student_id: studentData.id,
          course_completed: studentData.status === 'completed',
          completion_date: studentData.completionDate,
          consultation_hours: 0,
          certification_status: 'in_progress',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (dbError) {
        console.error('Error creating student record:', dbError);
        // Don't throw here, user was created successfully
      }

      return { id: newUser!.id, email: studentData.email };
    } catch (error) {
      console.error('Error in createPreVerifiedUser:', error);
      throw error;
    }
  }

  /**
   * Handle Kajabi webhook events
   * This is the main entry point for Kajabi integration
   */
  static async handleWebhook(webhookData: KajabiWebhook): Promise<void> {
    try {
      console.log('Processing Kajabi webhook:', webhookData.event);

      switch (webhookData.event) {
        case 'student.enrolled':
          await this.handleStudentEnrollment(webhookData);
          break;
        case 'course.completed':
          await this.handleCourseCompletion(webhookData);
          break;
        case 'student.updated':
          await this.handleStudentUpdate(webhookData);
          break;
        default:
          console.warn('Unknown webhook event:', webhookData.event);
      }
    } catch (error) {
      console.error('Kajabi webhook processing error:', error);
      throw error;
    }
  }

  /**
   * Handle new student enrollment from Kajabi
   */
  static async handleStudentEnrollment(webhookData: KajabiWebhook): Promise<void> {
    const { student, course } = webhookData;

    // Check if user already exists
    const existingUser = await this.getUserByEmail(student.email);
    if (existingUser) {
      console.log('User already exists:', student.email);
      return;
    }

    // Create pre-verified user through Supabase Auth
    const user = await this.createPreVerifiedUser({
      id: student.id,
      email: student.email,
      firstName: student.firstName,
      lastName: student.lastName,
      courseId: student.courseId,
      courseName: course?.name,
      status: 'enrolled'
    });

    // Generate login token for welcome email
    const loginToken = this.generateKajabiLoginToken(user.id);

    // TODO: Send welcome email with login instructions
    console.log(`Student enrolled successfully: ${user.email}`);
    console.log(`Login token generated: ${loginToken}`);
    console.log(`Welcome email should be sent to: ${user.email}`);
  }

  /**
   * Handle course completion from Kajabi
   */
  static async handleCourseCompletion(webhookData: KajabiWebhook): Promise<void> {
    const { student } = webhookData;

    // Find existing student
    const existingUser = await this.getUserByEmail(student.email);
    if (!existingUser) {
      console.warn('Student not found for course completion:', student.email);
      return;
    }

    // Update student profile with completion date
    await this.updateStudentCompletionDate(existingUser.id, new Date());

    // Enable consultation tracking
    await this.enableConsultationTracking(existingUser.id);

    // Send welcome email for consultation tracking
    await this.sendConsultationWelcomeEmail(existingUser);

    console.log('Course completion processed:', existingUser.id);
  }

  /**
   * Handle student updates from Kajabi
   */
  static async handleStudentUpdate(webhookData: KajabiWebhook): Promise<void> {
    const { student } = webhookData;

    const existingUser = await this.getUserByEmail(student.email);
    if (!existingUser) {
      console.warn('Student not found for update:', student.email);
      return;
    }

    // Update user profile
    await this.updateUserProfile(existingUser.id, {
      firstName: student.firstName,
      lastName: student.lastName,
    });

    console.log('Student updated:', existingUser.id);
  }

  /**
   * Create user profile from Kajabi data
   */
  static async createUserProfile(studentData: {
    email: string;
    firstName: string;
    lastName: string;
    role: UserRole;
    courseId?: string;
    courseName?: string;
  }): Promise<any> {
    // Create user in our database
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert([{
        email: studentData.email,
        first_name: studentData.firstName,
        last_name: studentData.lastName,
        role: studentData.role,
        created_at: new Date(),
        updated_at: new Date(),
      }])
      .select()
      .single();

    if (userError) {
      throw new Error(`User creation error: ${userError.message}`);
    }

    // Create student profile
    if (studentData.role === UserRole.STUDENT) {
      const { error: studentError } = await supabase
        .from('students')
        .insert([{
          user_id: user.id,
          course_completion_date: new Date(),
          total_verified_hours: 0,
          certification_status: 'in_progress',
          preferred_session_length: 60,
          consultation_preferences: {
            courseId: studentData.courseId,
            courseName: studentData.courseName,
          },
        }]);

      if (studentError) {
        throw new Error(`Student profile creation error: ${studentError.message}`);
      }
    }

    return user;
  }

  /**
   * Get user by email
   */
  static async getUserByEmail(email: string): Promise<any | null> {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (error || !data) {
      return null;
    }

    return data;
  }

  /**
   * Update student completion date
   */
  static async updateStudentCompletionDate(userId: string, completionDate: Date): Promise<void> {
    const { error } = await supabase
      .from('students')
      .update({
        course_completion_date: completionDate,
        updated_at: new Date(),
      })
      .eq('user_id', userId);

    if (error) {
      throw new Error(`Update completion date error: ${error.message}`);
    }
  }

  /**
   * Enable consultation tracking for student
   */
  static async enableConsultationTracking(userId: string): Promise<void> {
    const { error } = await supabase
      .from('students')
      .update({
        certification_status: 'in_progress',
        updated_at: new Date(),
      })
      .eq('user_id', userId);

    if (error) {
      throw new Error(`Enable consultation tracking error: ${error.message}`);
    }
  }

  /**
   * Update user profile
   */
  static async updateUserProfile(userId: string, updates: {
    firstName?: string;
    lastName?: string;
  }): Promise<void> {
    const updateData: any = {
      updated_at: new Date(),
    };

    if (updates.firstName) updateData.first_name = updates.firstName;
    if (updates.lastName) updateData.last_name = updates.lastName;

    const { error } = await supabase
      .from('users')
      .update(updateData)
      .eq('id', userId);

    if (error) {
      throw new Error(`Update user profile error: ${error.message}`);
    }
  }

  /**
   * Send consultation welcome email
   */
  static async sendConsultationWelcomeEmail(user: any): Promise<void> {
    // TODO: Implement email service integration
    console.log('Sending consultation welcome email to:', user.email);
    
    // This will be implemented when we add email automation
    // For now, just log the action
  }

  /**
   * Sync student progress back to Kajabi
   */
  static async syncStudentProgress(studentId: string, progress: {
    totalHours: number;
    certificationStatus: string;
    completionPercentage: number;
  }): Promise<void> {
    // TODO: Implement Kajabi API integration for progress sync
    console.log('Syncing progress to Kajabi for student:', studentId, progress);
    
    // This will be implemented when we add Kajabi API integration
    // For now, just log the action
  }

  /**
   * Get all students from Kajabi (for admin dashboard)
   */
  static async getAllKajabiStudents(): Promise<KajabiStudentProfile[]> {
    // TODO: Implement Kajabi API integration
    console.log('Fetching all students from Kajabi');
    
    // This will be implemented when we add Kajabi API integration
    // For now, return empty array
    return [];
  }

  /**
   * Validate Kajabi webhook signature
   */
  static validateWebhookSignature(signature: string, payload: string): boolean {
    if (!process.env.KAJABI_WEBHOOK_SECRET) {
      console.warn('KAJABI_WEBHOOK_SECRET not set, skipping signature validation');
      return true; // Allow for development
    }

    try {
      const expectedSignature = crypto
        .createHmac('sha256', process.env.KAJABI_WEBHOOK_SECRET)
        .update(payload)
        .digest('hex');
      
      return crypto.timingSafeEqual(
        Buffer.from(signature),
        Buffer.from(expectedSignature)
      );
    } catch (error) {
      console.error('Webhook signature validation error:', error);
      return false;
    }
  }
} 